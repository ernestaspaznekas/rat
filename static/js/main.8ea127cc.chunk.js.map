{"version":3,"sources":["packages/config/index.js","packages/config/main.js","packages/config/prod.js","packages/error/Error.js","packages/api/fetch.js","packages/loader/Loader.js","packages/url/getOpenWeather.js","packages/api/getWeather.js","packages/details/Details.js","packages/marker/Marker.js","packages/map/MapComponent.js","packages/map/Map.js","packages/main/Main.js","packages/service/worker.js","packages/render/Render.js"],"names":["api","googleMapURL","harba","harbours","visible","domain","openWeather","APPID","weather","yahooWeather","providers","yahoo","name","provider","coordinates","lat","lon","message","className","endpoint","options","fetch","height","width","timeout","type","color","weatherUrl","fetchFromApi","getUrl","config","method","main","sys","wind","feels_like","speed","humidity","pressure","Date","sunrise","split","sunset","MarkerComponent","state","loading","setWeather","setState","getWeather","props","then","response","json","catch","error","this","id","image","selected","onMarkerClick","position","Number","lng","onClick","alt","src","React","PureComponent","compose","withProps","containerElement","style","loadingElement","mapElement","withScriptjs","withGoogleMap","data","defaultZoom","defaultCenter","map","key","Map","handleMarkerClick","MapComponent","Component","App","fetchFormApi","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ea127cc.chunk.js","sourcesContent":["import dev      from './dev'\nimport main     from './main'\nimport prod     from './prod'\n\nexport default {\n    ...main,\n    ...( process.env.NODE_ENV === 'production' \n        ? prod\n        : dev\n    ),\n}","export default {\n\tapi: {\n\t\tgoogleMapURL: \t\t\t'urlToBeHere',\n\t\tharba: {\n\t\t\tharbours: {\n\t\t\t\tvisible: \t\t'urlToBeHere',\n\t\t\t},\n\t\t\tdomain:\t\t\t\t'urlToBeHere',\n\t\t},\n\t\topenWeather: {\n\t\t\tAPPID: \t\t\t\t'idToBeHere',\n\t\t\tweather: \t\t\t'urlToBeHere',\n\t\t},\n\t\tyahooWeather: {\n\t\t\tAPPID: \t\t\t\t'keyToBeHere',\n\t\t\tweather: \t\t\t'urlToBeHere',\n\t\t},\n\t},\n\tweather: {\n\t\tproviders: {\n\t\t\tyahoo: {\n\t\t\t\tname: \t\t\t'name',\n\t\t\t\tprovider: \t\t'provider',\n\t\t\t},\n\t\t\topenWeather: {\n\t\t\t\tname: \t\t\t'name',\n\t\t\t\tprovider: \t\t'provider',\n\t\t\t}\n\t\t},\n\t},\n\t// custom\n    coordinates: {\n        lat: 'latitude',\n        lon: 'longitude',\n    },\n}","export default {\n\tapi: {\n\t\tgoogleMapURL: \t\t\t'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places',\n\t\tharba: {\n\t\t\tharbours: {\n\t\t\t\tvisible: \t\t'https://devapi.harba.co/harbors/visible',\n\t\t\t},\n\t\t\tdomain:\t\t\t\t'https://devapi.harba.co',\n\t\t},\n\t\topenWeather: {\n\t\t\tAPPID: \t\t\t\t'8780f13a39a2b8f66fa388b272418483',\n\t\t\tweather: \t\t\t'https://api.openweathermap.org/data/2.5/weather?',\n\t\t},\n\t\tyahooWeather: {\n\t\t\tAPPID: \t\t\t\t'keyToBeHere',\n\t\t\tweather: \t\t\t'urlToBeHere',\n\t\t},\n\t},\n\tweather: {\n\t\tproviders: {\n\t\t\tyahoo: {\n\t\t\t\tname: \t\t\t'Yahoo Weather',\n\t\t\t\tprovider: \t\t'yahooWeather',\n\t\t\t},\n\t\t\topenWeather: {\n\t\t\t\tname: \t\t\t'Open Weather',\n\t\t\t\tprovider: \t\t'openWeather',\n\t\t\t}\n\t\t},\n    },\n    // custom\n    coordinates: {\n        lat: 55.656,\n        lon: 12.299,\n    },\n}","import React from 'react';\n\nimport './Error.scss'\n\n\nexport default ({ message }) => (\n    <h1 \n        className=\"harba-error\"\n    >\n        Error happend: <b>{message}</b>\n    </h1>\n)","export default ({ endpoint, options }) =>\n    fetch(\n        endpoint,\n        options,\n        // reference of available options\n        // {\n        //     method:              'GET',                  // *GET, POST, PUT, DELETE, etc.\n        //     mode:                'cors',                 // no-cors, *cors, same-origin\n        //     cache:               'no-cache',             // *default, no-cache, reload, force-cache, only-if-cached\n        //     credentials:         'same-origin',          // include, *same-origin, omit\n        //     headers: {\n        //         'Content-Type':  'application/json'\n        //         'Content-Type':  'application/x-www-form-urlencoded',\n        //     },\n        //     redirect:            'follow',               // manual, *follow, error\n        //     referrerPolicy:      'no-referrer',          // no-referrer, *client\n        //     body:                JSON.stringify(data)    // body data type must match 'Content-Type' header\n        // }\n    )","import React        from 'react';\nimport Loader       from 'react-loader-spinner'\n\nimport './Loader.scss'\n\nexport default ({ height, width, timeout }) => (\n    <div className=\"harba-loader\">\n        <h4>Loading...</h4>\n        <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={height}\n            width={width}\n            timeout={timeout}\n        />\n    </div>\n)","export default ({ \n    lat, \n    lon,\n    openWeather: { \n        weather: weatherUrl, \n        APPID \n    },\n}) => `${weatherUrl}lat=${lat}&lon=${lon}&APPID=${APPID}`","import config       from '../config'\nimport getUrl       from '../url/getOpenWeather'\n\nimport fetchFromApi from './fetch'\n\n\nexport default ({ lat, lon, provider }) => fetchFromApi({\n    endpoint: getUrl({ \n        lat, \n        lon, \n        openWeather: config.api[provider], \n    }),\n    options: {\n        method: 'GET',\n    },\n})\n","import React        from 'react'\n\nimport './Details.scss'\n\n\nexport default ({ main, sys, wind }) => (\n    <div className=\"harba-weather-details\">\n        <div>\n            <h3>Details:</h3>\n        </div>\n        <div>\n            <div>Feels like: {main.feels_like}<span>Â°C</span></div>\n        </div>\n        <div>\n            <div>Wind: {wind.speed} m/s</div>\n        </div>\n        <div>\n            <div>Humidity: {main.humidity}%</div>\n        </div>\n        <div>\n            <div>Pressure: {main.pressure} hPa</div>\n        </div>\n        <div>\n            <div>Sunrise: {Date(sys.sunrise).split('GMT')[0]}</div>\n        </div>\n        <div>\n            <div>Sunset:  {Date(sys.sunset).split('GMT')[0]}</div>\n        </div>\n    </div>\n)","import React        from 'react'\nimport {\n    InfoWindow,\n    Marker,\n}                   from 'react-google-maps'\n\nimport config       from '../config'\nimport getWeather   from '../api/getWeather'\nimport Loader       from '../loader/Loader'\nimport Details      from '../details/Details'\n\nimport './Marker.scss'\n\n\nexport default class MarkerComponent extends React.PureComponent {\n    state = {\n        loading:            false,\n        provider:           false,\n        weather:            false,\n    }\n\n    setWeather = () => {\n        this.setState({ loading: true })\n\n        getWeather({\n            lat:            this.props.lat, \n            lon:            this.props.lon, \n            provider:       config.weather.providers.openWeather.provider,\n        })\n            .then(response => response.json())\n            .then(weather => this.setState({\n                weather,\n                provider:   config.weather.providers.openWeather.name,\n                loading:    false,\n            }))\n            .catch(error => this.setState({\n                error,\n                loading:    false,\n            }))\n    }\n\n    render() {\n        const {\n            id,\n            image,\n            lat,\n            lon,\n            name,\n            selected,\n            onMarkerClick,\n        } = this.props\n\n        const {\n            provider,\n            weather,\n            loading,\n        } = this.state\n\n        if ( selected === id && ! weather & ! loading ) this.setWeather()\n        \n        return (\n            <Marker\n                position={{\n                    lat: Number(lat),\n                    lng: Number(lon),\n                }}\n                onClick={onMarkerClick(id)}\n            >\n                { selected === id &&\n                    <InfoWindow>\n                        <div className='harba-info'>\n                            <div>\n                                <h1>\n                                    {name}\n                                </h1>\n                            </div>\n                            <div>\n                                { image && \n                                    <img \n                                        alt={name}\n                                        src={`${config.api.harba.domain}${image}`} \n                                        height='150px' \n                                        width='250px'\n                                    /> \n                                }\n                            </div>\n                            { loading && \n                                <Loader \n                                    height={100}    \n                                    width={100} \n                                    timeout={0} \n                                /> \n                            }\n                            { weather && \n                                <Details \n                                    {...weather} \n                                /> \n                            }\n                            <div className=\"harba-weather-provider\">\n                                { provider && \n                                    <h3>\n                                        Provider: {provider}\n                                    </h3>\n                                }\n                            </div>\n                        </div>\n                    </InfoWindow>\n                }\n            </Marker>\n        )\n    }\n}","import React            from 'react'\nimport { \n    compose, \n    withProps, \n}                       from 'recompose'\nimport { \n    GoogleMap, \n    withScriptjs, \n    withGoogleMap, \n}                       from 'react-google-maps'\n\nimport config           from '../config'\nimport Marker           from '../marker/Marker'\n\n\nexport default compose(\n    withProps({\n        containerElement:   <div style={{ height: `100vh` }} />,\n        googleMapURL:       config.api.googleMapURL,\n        loadingElement:     <div style={{ height: `100%` }} />,\n        mapElement:         <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap\n)(({ data, selected, onMarkerClick }) => (\n        <GoogleMap\n            defaultZoom={3}\n            defaultCenter={{ \n                lat:        config.coordinates.lat, \n                lng:        config.coordinates.lon \n            }}\n        >\n            { data.map(({ id, image, lat, lon, name }) =>\n                <Marker\n                    id={id}\n                    image={image}\n                    key={id}\n                    lat={lat}\n                    lon={lon}\n                    name={name}\n                    selected={selected}\n                    onMarkerClick={onMarkerClick}\n                />\n            )}\n        </GoogleMap>\n    )\n)","import React        from 'react'\n\nimport MapComponent from './MapComponent'\n\nexport default class Map extends React.Component {\n    state = {\n        selected:       null,\n    }\n\n    handleMarkerClick = id => () => {\n        this.setState({ \n            selected:   id \n        })\n    }\n\n    render() {\n        return (\n            <MapComponent\n                onMarkerClick={this.handleMarkerClick}\n                data={this.props.data}\n                selected={this.state.selected}\n            />\n        )\n    }\n}","\nimport React            from 'react'\n\nimport config           from '../config'\nimport Error            from '../error/Error'\nimport fetchFormApi     from '../api/fetch'\nimport Loader           from '../loader/Loader'\nimport Map              from '../map/Map'\n\nimport './Main.scss'\n\n\nexport default class App extends React.Component {\n\n    state = {\n        data:               false,\n        error:              false,\n        loading:            false,\n    }\n\n    async componentDidMount() {\n        try {\n\n            this.setState({ \n                loading:    true \n            })\n\n            const data = await fetchFormApi({\n                endpoint: config.api.harba.harbours.visible,\n                options: {\n                    method: 'GET',\n                }\n            })\n\n            this.setState({ \n                data:       await data.json(),\n                loading:    false,\n            })\n\n        } catch (error) {\n            this.setState({ \n                error,\n                loading:    false,\n            })\n        }\n    }\n\n    render() {\n\n        const {\n            data,\n            error: { message },\n            loading,\n        } = this.state\n\n        return (\n            <div className=\"harba-main\">\n                { loading && \n                    <Loader \n                        height={360} \n                        width={360} \n                        timeout={0} \n                    />\n                }\n\n                { message && \n                    <Error \n                        message={message}\n                    />\n                }\n\n                { data && \n                    <Map \n                        data={data} \n                    />\n                }\n            </div>\n        )\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React        from 'react';\nimport ReactDOM     from 'react-dom';\n\nimport Main         from '../main/Main';\n\n\nexport default () => ReactDOM.render(\n    <Main />, \n    document.getElementById('app')\n)"],"sourceRoot":""}